package com.cgt.mentor.slot.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cgt.mentor.slot.entity.MentorSlot;
import com.cgt.mentor.slot.entity.SlotList;
import com.cgt.mentor.slot.entity.SlotStatusResponse;
import com.cgt.mentor.slot.facade.MentorSlotService;

@RestController
@RequestMapping("/mentorslot")
public class MentorSlotController {

	@Autowired
	private MentorSlotService service;
	
	@RequestMapping("/getAllSlot")
	public SlotList getAllSlot()
	{
		return this.service.getAll();
	}
	
	@RequestMapping("/getById/{id}")
	public MentorSlot getById(@PathVariable("id") Integer id)
	{
		return this.service.getById(id);
	}
	
	@RequestMapping("/save")
	public ResponseEntity<SlotStatusResponse> save(@RequestBody MentorSlot slot)
	{
		SlotStatusResponse status = new SlotStatusResponse(this.service.save(slot));
		
		if(!status.getListSlot())
			return new ResponseEntity<SlotStatusResponse>(status,HttpStatus.NOT_ACCEPTABLE);
		
		return new ResponseEntity<SlotStatusResponse>(status,HttpStatus.ACCEPTED);
	}
	
	@RequestMapping("/delete/{id}")
	public ResponseEntity<SlotStatusResponse> delete(@PathVariable("id") Integer id)
	{
		SlotStatusResponse status = new SlotStatusResponse(this.service.delete(id));
		
		if(!status.getListSlot())
			return new ResponseEntity<SlotStatusResponse>(status,HttpStatus.NOT_ACCEPTABLE);
		
		return new ResponseEntity<SlotStatusResponse>(status,HttpStatus.ACCEPTED);
	}
	
	@RequestMapping("/update")
	public ResponseEntity<SlotStatusResponse> update(@RequestBody MentorSlot slot)
	{
		SlotStatusResponse status = new SlotStatusResponse(this.service.update(slot));
		
		if(!status.getListSlot())
			return new ResponseEntity<SlotStatusResponse>(status,HttpStatus.NOT_ACCEPTABLE);
		
		return new ResponseEntity<SlotStatusResponse>(status,HttpStatus.ACCEPTED);
	}
}
