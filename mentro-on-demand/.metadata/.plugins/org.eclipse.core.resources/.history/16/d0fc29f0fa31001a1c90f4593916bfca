package com.cgt.mentor.training.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.cgt.mentor.training.entity.Training;
import com.cgt.mentor.training.entity.TrainingList;
import com.cgt.mentor.training.entity.TrainingStatusResponse;
import com.cgt.mentor.training.facade.TrainingService;

@RestController
@RequestMapping("/training")
public class TrainingController {

	@Autowired
	private TrainingService service;
	
	@RequestMapping("/getAllTraining")
	public ResponseEntity<TrainingList> getAllTraining()
	{
		TrainingList list = this.service.getAll();
		
		if(list.getTrainingList() == null)
			return new ResponseEntity<TrainingList>(list,HttpStatus.NOT_ACCEPTABLE);
		
		return new ResponseEntity<TrainingList>(list,HttpStatus.ACCEPTED);
	}
	
	@RequestMapping("/getById/{id}")
	public ResponseEntity<Training> getTraininglById(@PathVariable("id") Integer id)
	{
		Training byId = service.getById(id);
		
		if(byId == null)
			return new ResponseEntity<Training>(byId,HttpStatus.NOT_ACCEPTABLE);
		
		return new ResponseEntity<Training>(byId,HttpStatus.ACCEPTED);
	}
	
	@RequestMapping("/save")
	public ResponseEntity<TrainingStatusResponse> save(@RequestBody Training skill)
	{
		TrainingStatusResponse status = new TrainingStatusResponse(this.service.save(skill));
		
		if(!status.getStatus())
			return new ResponseEntity<TrainingStatusResponse>(status,HttpStatus.NOT_ACCEPTABLE);
		
		return new ResponseEntity<TrainingStatusResponse>(status,HttpStatus.ACCEPTED);
	}
	
	@RequestMapping("/delete/{id}")
	public ResponseEntity<TrainingStatusResponse> delete(@PathVariable("id") Integer id)
	{
		TrainingStatusResponse status = new TrainingStatusResponse(this.service.delete(id));
		
		if(!status.getStatus())
			return new ResponseEntity<TrainingStatusResponse>(status,HttpStatus.NOT_ACCEPTABLE);
		
		return new ResponseEntity<TrainingStatusResponse>(status,HttpStatus.ACCEPTED);
	}
	
	@RequestMapping("/update")
	public ResponseEntity<TrainingStatusResponse> update(@RequestBody Training skill)
	{
		TrainingStatusResponse status = new TrainingStatusResponse(this.service.update(skill));
		
		if(!status.getStatus())
			return new ResponseEntity<TrainingStatusResponse>(status,HttpStatus.NOT_ACCEPTABLE);
		
		return new ResponseEntity<TrainingStatusResponse>(status,HttpStatus.ACCEPTED);
	}
	
	@RequestMapping("/getTrainingById/{mentorId}")
	public ResponseEntity<TrainingList> getTrainingById(@PathVariable("mentorId") Integer mentorId)
	{
		TrainingList list = this.service.getTrainingById(mentorId);
		
		if(list.getTrainingList() == null)
			return new ResponseEntity<TrainingList>(list,HttpStatus.NOT_ACCEPTABLE);
		
		return new ResponseEntity<TrainingList>(list,HttpStatus.ACCEPTED);
	}
	
	@RequestMapping("/checkSlot/{slotId}")
	public ResponseEntity<TrainingStatusResponse> checkSlot(@PathVariable("slotId") Integer slotId)
	{
		TrainingStatusResponse status = new TrainingStatusResponse(this.service.checkSlot(slotId));
		
		if(!status.getStatus())
			return new ResponseEntity<TrainingStatusResponse>(status,HttpStatus.NOT_ACCEPTABLE);
		
		return new ResponseEntity<TrainingStatusResponse>(status,HttpStatus.ACCEPTED);
	}
}
